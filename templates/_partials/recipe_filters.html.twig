{# templates/_partials/recipe_filters.html.twig #}
{# Props (toutes optionnelles) :
   - action_route ('app_recipe_index')
   - action_params ({ _locale: app.request.locale })
   - categories (array)
   - current_category, current_difficulty, sort, page_size, current_search
   - show_density_toggle, show_category, show_difficulty, show_sort, show_per_page (bool)
#}

{% set action_route = action_route|default('app_recipe_index') %}
{% set action_params = action_params|default({ _locale: app.request.locale }) %}

{% set _diff = current_difficulty in ['moyen','moyenne'] ? 'moyenne' : current_difficulty %}
{% set _qval = current_search ?? app.request.get('q') ?? app.request.get('search') %}
{% set _per  = page_size ?? app.request.get('ps')|default(12) %}

{% set show_density_toggle = show_density_toggle is defined ? show_density_toggle : true %}
{% set show_category   = show_category   is defined ? show_category   : true %}
{% set show_difficulty = show_difficulty is defined ? show_difficulty : true %}
{% set show_sort       = show_sort       is defined ? show_sort       : true %}
{% set show_per_page   = show_per_page   is defined ? show_per_page   : true %}

<div class="recipe-filters">
    <form
        action="{{ path(action_route, action_params) }}"
        method="get"
        class="filters-form"
    >
        <div class="filter-row">
            <input type="hidden" name="p" value="1">

            <div class="filter-group" style="position:relative">
                <input
                    type="text"
                    name="q"
                    value="{{ _qval }}"
                    class="form-control search-input"
                    placeholder="{{ 'filters.search_ph'|trans }}"
                    autocomplete="off"
                    data-suggest-url="{{ path('app_search_suggest', {'_locale': app.request.locale}) }}"
                >

                {# le dropdown sera inject√© ici par le script #}
            </div>

            {% if show_category %}
                <div class="filter-group">
                    <select name="category" class="form-select" onchange="this.form.submit()">
                        <option value="">{{ 'filters.category_all'|trans }}</option>
                        {% if categories is defined and categories is not empty %}
                            {% for c in categories %}
                                <option value="{{ c }}" {{ current_category == c ? 'selected' : '' }}>{{ c|title }}</option>
                            {% endfor %}
                        {% else %}
                            <option value="dessert"   {{ current_category == 'dessert'   ? 'selected' : '' }}>üç∞ Dessert</option>
                            <option value="boisson"   {{ current_category == 'boisson'   ? 'selected' : '' }}>ü•§ Boisson</option>
                            <option value="plat"      {{ current_category == 'plat'      ? 'selected' : '' }}>üçΩÔ∏è Plat</option>
                            <option value="sauce"     {{ current_category == 'sauce'     ? 'selected' : '' }}>ü•Ñ Sauce</option>
                            <option value="confiture" {{ current_category == 'confiture' ? 'selected' : '' }}>üçØ Confiture</option>
                            <option value="salade"    {{ current_category == 'salade'    ? 'selected' : '' }}>ü•ó Salade</option>
                        {% endif %}
                    </select>
                </div>
            {% endif %}

            {% if show_difficulty %}
                <div class="filter-group">
                    <select name="difficulty" class="form-select" onchange="this.form.submit()">
                        <option value="">{{ 'filters.diff_all'|trans }}</option>
                        <option value="newest" {{ sort == 'newest' ? 'selected' : '' }}>{{ 'filters.sort.newest'|trans }}</option>
                        <option value="oldest" {{ sort == 'oldest' ? 'selected' : '' }}>{{ 'filters.sort.oldest'|trans }}</option>
                        <option value="title"  {{ sort == 'title'  ? 'selected' : '' }}>{{ 'filters.sort.title'|trans }}</option>
                    </select>
                </div>
            {% endif %}

            {% if show_sort %}
                <div class="filter-group">
                    <select name="sort" class="form-select" onchange="this.form.submit()">
                        <option value="newest" {{ sort == 'newest' ? 'selected' : '' }}>{{ 'filters.sort.newest'|trans}}</option>
                        <option value="oldest" {{ sort == 'oldest' ? 'selected' : '' }}>{{ 'filters.sort.oldest'|trans }}</option>
                        <option value="title"  {{ sort == 'title'  ? 'selected' : '' }}>{{ 'filters.sort.title' |trans }}</option>
                    </select>
                </div>
            {% endif %}

            {% if show_per_page %}
                <div class="filter-group">
                    <select name="ps" class="form-select" onchange="this.form.submit()">
                        {% for n in [10,20,50] %}
                            <option value="{{ n }}" {{ _per == n ? 'selected' : '' }}>{{ n }} / page</option>
                        {% endfor %}
                    </select>
                </div>
            {% endif %}

            {% if show_density_toggle %}
                <button id="densityToggle" type="button" class="btn btn-outline-secondary btn-sm" aria-pressed="false">
                    Mode compact
                </button>
            {% endif %}

            <div class="filter-group">
                <button type="submit" class="btn btn-primary">Filtrer</button>
                <a href="{{ path(action_route, action_params) }}" class="btn btn-outline-secondary">Effacer</a>
            </div>
        </div>
    </form>

    {% if _qval %}
        <p class="muted mt-2">R√©sultats pour ¬´ <strong>{{ _qval }}</strong> ¬ª</p>
    {% endif %}

    <style>
        .oc-suggest{
            position:absolute; top:100%; left:0; width:min(360px, 92vw);
            background:#fff; border:1px solid #e5e7eb; border-radius:10px;
            box-shadow:0 10px 26px rgba(0,0,0,.12); margin-top:6px;
            z-index:1000; /* ‚Üê plus haut */
            overflow:auto; max-height:300px
        }
        .oc-suggest ul{list-style:none;margin:0;padding:6px}
        .oc-suggest li{
            display:flex; align-items:center; gap:8px;
            padding:8px 10px; border-radius:8px; cursor:pointer
        }
        .oc-suggest li[aria-selected="true"], .oc-suggest li:hover{ background:#fff7ed }
        .oc-suggest .type{ font-size:12px; color:#9ca3af; margin-left:auto }
    </style>

    <script>
        (() => {
            // robust: cherche d'abord via currentScript, sinon dans le DOM
            const root =
                (document.currentScript && document.currentScript.closest('.recipe-filters')) ||
                document.querySelector('.recipe-filters');
            if (!root) return;

            const input = root.querySelector('input[name="q"][data-suggest-url]');
            if (!input) return;

            const url  = input.dataset.suggestUrl;
            const host = input.closest('.filter-group');
            let panel, active = -1, items = [];

            const ensurePanel = () => {
                if (panel) return panel;
                panel = document.createElement('div');
                panel.className = 'oc-suggest';
                panel.hidden = true;
                panel.setAttribute('role','listbox');
                panel.innerHTML = '<ul></ul>';
                host.appendChild(panel);
                return panel;
            };

            const show = () => { ensurePanel(); panel.hidden = false; };
            const hide = () => { if (panel) { panel.hidden = true; active = -1; } };
            const hasPanel = () => panel && !panel.hidden;

            const norm = (json) => {
                // Accepte [".."] ou {items:[...]} ou {items:[{label,type,url}]}
                const arr = Array.isArray(json) ? json : (Array.isArray(json.items) ? json.items : []);
                return arr.map(x => {
                    if (typeof x === 'string') return { label: x, type: 'text', url: null };
                    return { label: x.label ?? '', type: x.type ?? 'text', url: x.url ?? null };
                }).filter(o => o.label);
            };

            const esc = (s='') => s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));

            const render = () => {
                ensurePanel();
                const ul = panel.querySelector('ul');
                if (!items.length) { ul.innerHTML = ''; hide(); return; }
                ul.innerHTML = items.map((it, i) =>
                    `<li role="option" data-idx="${i}" aria-selected="${i===active?'true':'false'}">
             <span>${esc(it.label)}</span>
             ${it.type ? `<span class="type">${esc(it.type)}</span>` : ''}
           </li>`
                ).join('');
                ul.querySelectorAll('li').forEach(li => {
                    li.addEventListener('mousedown', (e) => { // mousedown pour √©viter blur
                        e.preventDefault();
                        choose(Number(li.dataset.idx));
                    });
                });
                show();
            };

            const choose = (idx) => {
                const it = items[idx];
                if (!it) return;
                if (it.url) {
                    window.location.assign(it.url);
                } else {
                    input.value = it.label;
                    hide();
                }
            };

            const move = (dir) => {
                if (!items.length) return;
                active = (active + dir + items.length) % items.length;
                render();
            };

            const debounce = (fn, ms=180) => { let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a),ms);} };

            const fetchIt = debounce(async () => {
                const q = input.value.trim();
                if (q.length < 2) { items = []; render(); return; }
                try {
                    const res = await fetch(`${url}?q=${encodeURIComponent(q)}`, { headers: { 'Accept':'application/json' }});
                    if (!res.ok) { items = []; render(); return; }
                    const json = await res.json();
                    // console.log('[suggest]', json); // debug si besoin
                    items = norm(json).slice(0, 10);
                    active = items.length ? 0 : -1;
                    render();
                } catch (e) {
                    // console.warn('[suggest] error', e);
                    items = []; render();
                }
            }, 200);

            input.addEventListener('input', fetchIt);
            input.addEventListener('focus', () => { if (items.length) show(); });
            input.addEventListener('blur', () => setTimeout(hide, 100));

            input.addEventListener('keydown', (e) => {
                if (!hasPanel()) return;
                if (e.key === 'ArrowDown') { e.preventDefault(); move(+1); }
                else if (e.key === 'ArrowUp') { e.preventDefault(); move(-1); }
                else if (e.key === 'Enter') { if (active>=0) { e.preventDefault(); choose(active); } }
                else if (e.key === 'Escape') { hide(); }
            });

            document.addEventListener('mousedown', (e) => {
                if (!host.contains(e.target)) hide();
            });
        })();
    </script>
</div>
